  @BeforeEach
    void setUp() {
        summaryRequest = new GetSummaryDetailsRequest();
        summaryRequest.setFilterCriteria(Collections.emptyList());
        summaryRequest.setSortBy("name");
        summaryRequest.setSortDir("ASC");
        summaryRequest.setPageNum(1);
        summaryRequest.setPageSize(10);
    }

    @Test
    void testGetHealthCheckSummaryDetails_withValidRequest() {
        List<HealthCheckSummary> summaries = List.of(new HealthCheckSummary());
        Page<HealthCheckSummary> pagedSummaries = new PageImpl<>(summaries);
        List<AggregatedDTO> aggregatedDTOs = List.of(new AggregatedDTO());

        when(healthCheckSummaryRepository.findAll(any(GenericSpecification.class), any(Pageable.class)))
            .thenReturn(pagedSummaries);
        when(healthCheckSummaryMapper.toAggregatedDtos(any())).thenReturn(aggregatedDTOs);

        APIResponse<List<AggregatedDTO>> response = healthCheckSummaryService.getHealthCheckSummaryDetails(summaryRequest);

        assertEquals("Success", response.getMessage());
        assertEquals(HttpStatus.OK, response.getStatus());
        assertEquals(1, response.getTotalPages());
        assertEquals(1, response.getCurrentPage());
        assertEquals(aggregatedDTOs.size(), response.getData().size());
    }

    @Test
    void testGetHealthCheckSummaryDetails_withNullRequest() {
        APIResponse<List<AggregatedDTO>> response = healthCheckSummaryService.getHealthCheckSummaryDetails(null);

        assertEquals("Success", response.getMessage());
        assertEquals(HttpStatus.OK, response.getStatus());
        assertEquals(0, response.getTotalPages());
        assertEquals(0, response.getCurrentPage());
        assertEquals(0, response.getData().size());
    }

    @Test
    void testGetHealthCheckSummaryDetails_withDifferentSortDirection() {
        summaryRequest.setSortDir("DESC");
        List<HealthCheckSummary> summaries = List.of(new HealthCheckSummary());
        Page<HealthCheckSummary> pagedSummaries = new PageImpl<>(summaries);
        List<AggregatedDTO> aggregatedDTOs = List.of(new AggregatedDTO());

        when(healthCheckSummaryRepository.findAll(any(GenericSpecification.class), any(Pageable.class)))
            .thenReturn(pagedSummaries);
        when(healthCheckSummaryMapper.toAggregatedDtos(any())).thenReturn(aggregatedDTOs);

        APIResponse<List<AggregatedDTO>> response = healthCheckSummaryService.getHealthCheckSummaryDetails(summaryRequest);

        assertEquals("Success", response.getMessage());
        assertEquals(HttpStatus.OK, response.getStatus());
        assertEquals(1, response.getTotalPages());
        assertEquals(1, response.getCurrentPage());
        assertEquals(aggregatedDTOs.size(), response.getData().size());
    }

    @Test
    void testGetHealthCheckSummaryDetails_withPagination() {
        summaryRequest.setPageNum(2);
        summaryRequest.setPageSize(5);
        List<HealthCheckSummary> summaries = List.of(new HealthCheckSummary());
        Page<HealthCheckSummary> pagedSummaries = new PageImpl<>(summaries, PageRequest.of(1, 5), 10);
        List<AggregatedDTO> aggregatedDTOs = List.of(new AggregatedDTO());

        when(healthCheckSummaryRepository.findAll(any(GenericSpecification.class), any(Pageable.class)))
            .thenReturn(pagedSummaries);
        when(healthCheckSummaryMapper.toAggregatedDtos(any())).thenReturn(aggregatedDTOs);

        APIResponse<List<AggregatedDTO>> response = healthCheckSummaryService.getHealthCheckSummaryDetails(summaryRequest);

        assertEquals("Success", response.getMessage());
        assertEquals(HttpStatus.OK, response.getStatus());
        assertEquals(2, response.getTotalPages());
        assertEquals(2, response.getCurrentPage());
        assertEquals(aggregatedDTOs.size(), response.getData().size());
    }
