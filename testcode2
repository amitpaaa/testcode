private Predicate buildSubqueryPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder builder) {
    List<Selection<?>> selectionList = new ArrayList<>();
    List<Expression<?>> groupByExpressions = new ArrayList<>();

    // Add group by columns to selection and groupBy expressions
    for (String groupByColumn : groupByColumns) {
        Expression<?> groupByExpression = root.get(groupByColumn);
        groupByExpressions.add(groupByExpression);
        selectionList.add(groupByExpression);
    }

    // Add sum columns to selection list
    for (String sumColumn : sumColumns) {
        selectionList.add(builder.sum(root.get(sumColumn)).alias(sumColumn));
    }

    // Add all other columns to the selection list
    root.getModel().getAttributes().forEach(attribute -> {
        String columnName = attribute.getName();
        if (!groupByColumns.contains(columnName) && !sumColumns.contains(columnName)) {
            selectionList.add(root.get(columnName));
        }
    });

    // Apply selections, groupBy, and predicates to the query
    query.multiselect(selectionList)
         .groupBy(groupByExpressions)
         .where(buildPredicates(root, builder).toArray(new Predicate[0]));

    return builder.and(buildPredicates(root, builder).toArray(new Predicate[0]));
}




 for (String selectColumn : selectColumns) {
        Expression<?> columnExpression = root.get(selectColumn);
        selectionList.add(columnExpression);

        // Include in group by if not a sum column
        if (!sumColumns.contains(selectColumn)) {
            groupByExpressions.add(columnExpression);
        }
    }
