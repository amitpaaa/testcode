import { ComponentFixture, TestBed } from '@angular/core/testing';
import { DailyIssueDetailsComponent } from './daily-issue-details.component';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';
import { ReactiveFormsModule, FormBuilder, FormGroup, FormControl } from '@angular/forms';
import { MatIconTestingModule } from '@angular/material/icon/testing';
import { NoopAnimationsModule } from '@angular/platform-browser/animations';
import { MaterialCommonModule } from 'src/material.module';
import { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';

describe('DailyIssueDetailsComponent', () => {
  let component: DailyIssueDetailsComponent;
  let fixture: ComponentFixture<DailyIssueDetailsComponent>;

  beforeEach(async () => {
    // Mock dialog data
    const mockDialogData = {
      issueDetailForm: new FormGroup({
        issueLogCode: new FormControl('TestCode'),
        contractName: new FormControl('TestContract'),
      }),
    };

    // Mock MatDialogRef
    const mockDialogRef = {
      close: jasmine.createSpy('close'),
    };

    await TestBed.configureTestingModule({
      declarations: [DailyIssueDetailsComponent],
      imports: [
        HttpClientTestingModule,
        ReactiveFormsModule,
        MaterialCommonModule,
        NoopAnimationsModule,
        MatIconTestingModule,
      ],
      schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA],
      providers: [
        FormBuilder,
        { provide: MatDialogRef, useValue: mockDialogRef },
        { provide: MAT_DIALOG_DATA, useValue: mockDialogData },
      ],
    }).compileComponents();

    fixture = TestBed.createComponent(DailyIssueDetailsComponent);
    component = fixture.componentInstance;
    fixture.detectChanges();
  });

  it('should create', () => {
    expect(component).toBeTruthy();
  });

  it('should initialize with provided dialog data', () => {
    expect(component.issueLogCode).toBe('TestCode');
    expect(component.contractName).toBe('TestContract');
  });

  it('should close the dialog on onClose()', () => {
    component.onClose();
    expect(TestBed.inject(MatDialogRef).close).toHaveBeenCalled();
  });
});
