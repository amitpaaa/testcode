// Prepare the paths
List<Path<?>> groupByColumns = new ArrayList<>();
List<Selection<?>> selections = new ArrayList<>();

for (Map.Entry<String, Path<?>> entry : columnPaths.entrySet()) {
    String columnName = entry.getKey();
    Path<?> path = entry.getValue();
    
    // Handle numeric columns with sum
    if (columnName.equals("n_abs_amount_field_value") || 
        columnName.equals("n_abs_principal_amount") || 
        columnName.equals("n_abs_total_amount_field_value") || 
        columnName.equals("n_abs_total_principal_amount")) {

        if (path.getJavaType() == String.class) {
            // Handle the case where the value is a String
            // Typically, you cannot sum a String; decide the proper action or conversion
            // selections.add(criteriaBuilder.sum(criteriaBuilder.toBigDecimal(path)));
            // or leave it out if summing is inappropriate:
            // selections.add(path); // This just adds the path without summing
        } else {
            // Cast path to Path<Number> for summing
            selections.add(criteriaBuilder.sum((Path<Number>) path));
        }
    } else {
        // Add to both selections and groupBy columns
        selections.add(path);
        groupByColumns.add(path);
    }
}

// Apply multiselect
query.multiselect(selections);

// Apply groupBy
query.groupBy(groupByColumns.toArray(new Path<?>[0]));
