Map<String, List<HealthCheckSummary>> groupedHealthCheckSummaries = 
    allHealthCheckSummaries.stream()
        .collect(Collectors.groupingBy(summary -> 
            StringUtils.isBlank(summary.getBusinessCheckGroup()) ? "null" : summary.getBusinessCheckGroup()));

// Step 3: Convert grouped records to DTOs and aggregate within each group
List<SummaryDetailsDTO> aggregatedDTOs = new ArrayList<>();
for (Map.Entry<String, List<HealthCheckSummary>> entry : groupedHealthCheckSummaries.entrySet()) {
    String groupKey = entry.getKey();
    List<HealthCheckSummary> summaries = entry.getValue();

    if (summaries.size() > 1) {
        // Aggregating within the group
        SummaryDetailsDTO aggregatedDTO = new SummaryDetailsDTO();
        int totalRecords = 0;
        int errorRecords = 0;
        int successRecords = 0;

        for (HealthCheckSummary summary : summaries) {
            totalRecords += summary.getTotalRecords();
            errorRecords += summary.getRecordsFailed();
            successRecords += summary.getRecordsPassed();
            aggregatedDTO = healthCheckSummaryMapper.toDto(summary); // Assuming this copies relevant fields
        }

        aggregatedDTO.setTotalRecords(totalRecords);
        aggregatedDTO.setRecordsFailed(errorRecords);
        aggregatedDTO.setRecordsPassed(successRecords);
        aggregatedDTO.setGrouped(true);

        aggregatedDTOs.add(aggregatedDTO);
    } else {
        // Single record in the group, map directly
        aggregatedDTOs.addAll(healthCheckSummaryMapper.toDtos(summaries));
    }
}

// Step 4: Apply pagination to the aggregated DTOs
Pageable pageable = PageRequest.of(summaryRequest.getPageNum() - 1, summaryRequest.getPageSize(), sort);
int start = (int) pageable.getOffset();
int end = Math.min((start + pageable.getPageSize()), aggregatedDTOs.size());
List<SummaryDetailsDTO> pagedDTOs = aggregatedDTOs.subList(start, end);

// Step 5: Creating the response
return new APIResponse<>(
    pagedDTOs, 
    "Success", 
    (aggregatedDTOs.size() + pageable.getPageSize() - 1) / pageable.getPageSize(), 
    pageable.getPageNumber() + 1, 
    aggregatedDTOs.size()
);
