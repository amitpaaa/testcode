import { Component, Inject, OnInit } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';
import { IssueDetailService } from 'path-to-issue-detail-service';
import { ApiResponse, IssueDailyDetail, PagingResponse } from 'path-to-models';
import { Signal, computed } from '@angular/core';
import { catchError } from 'rxjs/operators';
import { throwError } from 'rxjs';

export class DailyIssueDetailsComponent implements OnInit {
  issueDetailForm: FormGroup;
  issueLogCode: string;
  contractName: string;
  issueDailyDetails: IssueDailyDetail[] = [];
  dataSource: Signal<PagingResponse<IssueDailyDetail>>;
  pageSize: number = 50;

  columnDefs = [
    { name: 'As Of Date', id: 'asOfDate', width: 100, isActive: true, type: FieldType.Date, filterType: FilterType.Date },
    { name: 'Process Date', id: 'executionTimestamp', width: 100, isActive: true, type: FieldType.Date, filterType: FilterType.Date },
    { name: 'Error Count', id: 'errorCount', width: 100, isActive: true, type: FieldType.Number, filterType: FilterType.Number },
    { name: 'Error Balance', id: 'principalErrorBalance', width: 100, isActive: true, type: FieldType.Number, filterType: FilterType.Number },
  ];

  constructor(
    @Inject(MAT_DIALOG_DATA) public data: { issueDetailForm: FormGroup },
    public dialogRef: MatDialogRef<DailyIssueDetailsComponent>,
    private issueDetailService: IssueDetailService
  ) {
    this.issueLogCode = data.issueDetailForm.get('issueLogCode')?.value;
    this.contractName = data.issueDetailForm.get('contractName')?.value;
  }

  ngOnInit(): void {
    this.fetchIssueDetails();
  }

  fetchIssueDetails(): void {
    this.issueDetailService
      .getIssueDailyDetailsByLogCode(this.issueLogCode)
      .pipe(
        catchError((err) => {
          console.error('Error fetching issue details:', err);
          return throwError(err);
        })
      )
      .subscribe({
        next: (response: ApiResponse<IssueDailyDetail>) => {
          if (response && response.data) {
            this.issueDailyDetails = response.data;
            this.updateDataSource();
          }
        },
        error: (err) => {
          console.error('Error:', err);
        },
      });
  }

  updateDataSource(): void {
    this.dataSource = computed(() => ({
      currentPage: 1,
      totalRecords: this.issueDailyDetails.length,
      totalPages: Math.ceil(this.issueDailyDetails.length / this.pageSize),
      data: this.issueDailyDetails,
      message: '',
      status: '',
    }));
  }

  onClose(): void {
    this.dialogRef.close();
  }
}
