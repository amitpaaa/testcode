private void getGroupByPredicates(Root<T> root, CriteriaQuery<?> query, SearchCriteria criteria, CriteriaBuilder criteriaBuilder, Path<?> path) {
    if ("groupBy".equalsIgnoreCase(criteria.getOperation())) {
        Path<String> execIdPath = root.get("execId");
        if (criteria.getValue() != null) {
            query.where(criteriaBuilder.equal(execIdPath, criteria.getValue()));
        }
        
        List<String> responseAttributes = Arrays.asList(
            "businessCheckGroup",
            "totalPrincipalAmount",
            "principalAmount"
            // Add other necessary attributes here
        );
        
        ConcurrentHashMap<String, Path<?>> columnPaths = getColumnPaths(root, HealthCheckSummary.class);
        List<Selection<?>> selections = new ArrayList<>();
        List<Path<?>> reorderedColumnPaths = new ArrayList<>();

        for (Map.Entry<String, Path<?>> entry : columnPaths.entrySet()) {
            String key = entry.getKey();
            Path<?> columnPath = entry.getValue();

            if (responseAttributes.contains(key)) {
                if ("businessCheckGroup".equals(key)) {
                    reorderedColumnPaths.add(0, columnPath); // Add to the start of the list
                    selections.add(0, columnPath); // Add to the start of the selections
                } else if ("totalPrincipalAmount".equals(key) || "principalAmount".equals(key)) {
                    selections.add(criteriaBuilder.sum(criteriaBuilder.toBigDecimal(columnPath)));
                } else {
                    reorderedColumnPaths.add(columnPath); // Add to the end of the list
                    selections.add(columnPath); // Add to the end of the selections
                }
            }
        }
        query.multiselect(selections);
        query.groupBy(reorderedColumnPaths.toArray(new Path<?>[0]));
    }
}









 List<SummaryDetailsDTO> healthCheckSummaryList = pagedHealthCheckSummaryList.stream()
        .map(healthCheckSummary -> {
            SummaryDetailsDTO dto = healthCheckSummaryMapper.toDto(healthCheckSummary);
            dto.setIsGrouped(true); 
            return dto;
        })
        .collect(Collectors.toList());
